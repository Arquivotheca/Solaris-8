#
# Copyright (c) 1992-1999 by Sun Microsystems, Inc.
# All rights reserved.
#
#pragma ident	"@(#)Makefile.sparc	1.110	00/09/14 SMI"
#
# uts/sparc/Makefile.sparc
#
#	This makefile contains the common definitions for all sparc
#	implementation architecture independent modules.
#


#
#	Define supported builds
#
DEF_BUILDS	= $(DEF_BUILDS64)
ALL_BUILDS	= $(ALL_BUILDS64)

#
#	Everybody needs to know how to build modstubs.o and to locate unix.o.
#	Note that unix.o must currently be selected from among the possible
#	"implementation architectures". Note further, that unix.o is only
#	used as an optional error check for undefines so (theoretically)
#	any "implementation architectures" could be used. We choose sun4m
#	because it is the reference port.
#
UNIX_DIR	 = $(UTSBASE)/sun4m/unix
GENLIB_DIR	 = $(UTSBASE)/sparc/genunix
MODSTUBS_DIR	 = $(UNIX_DIR)
DSF_DIR		 = $(UNIX_DIR)
LINTS_DIR	 = $(OBJS_DIR)
LINT_LIB_DIR	 = $(UTSBASE)/sparc/lint-libs/$(OBJS_DIR)

UNIX_O		 = $(UNIX_DIR)/$(OBJS_DIR)/unix.o
MODSTUBS_O	 = $(MODSTUBS_DIR)/$(OBJS_DIR)/modstubs.o
GENLIB		 = $(GENLIB_DIR)/$(OBJS_DIR)/libgenunix.so

LINT_LIB_32	 = $(UTSBASE)/sun4m/lint-libs/$(OBJS_DIR)/llib-lunix.ln
GEN_LINT_LIB_32	 = $(LINT_LIB_DIR)/llib-lgenunix.ln

LINT_LIB_64	 = $(UTSBASE)/sun4u/lint-libs/$(OBJS_DIR)/llib-lunix.ln
GEN_LINT_LIB_64	 = $(UTSBASE)/sun4u/lint-libs/$(OBJS_DIR)/llib-lgenunix.ln

LINT_LIB	 = $(LINT_LIB_$(CLASS))
GEN_LINT_LIB	 = $(GEN_LINT_LIB_$(CLASS))

LINT64_DIRS	 = $(LINT64_BUILDS:%=$(UTSBASE)/sparc/lint-libs/%)
LINT64_FILES	 = $(LINT64_DIRS:%=%/llib-l$(MODULE).ln)

#
#	Include the makefiles which define build rule templates, the
#	collection of files per module, and a few specific flags. Note
#	that order is significant, just as with an include path. The
#	first build rule template which matches the files name will be
#	used. By including these in order from most machine dependent
#	to most machine independent, we allow a machine dependent file
#	to be used in preference over a machine independent version
#	(Such as a machine specific optimization, which preserves the
#	interfaces.)
#
include $(UTSBASE)/sparc/Makefile.files
include $(UTSBASE)/sun/Makefile.files
include $(UTSBASE)/common/Makefile.files

#
#	Include machine independent rules. Note that this does not imply
#	that the resulting module from rules in Makefile.uts is	machine
#	independent. Only that the build rules are machine independent.
#
include $(UTSBASE)/Makefile.uts

#
#	machine specific optimization, override default in Makefile.master
#
XARCH_32	= -xarch=v7
XARCH_64	= -xarch=v9
XARCH		= $(XARCH_$(CLASS))

COPTIMIZE_32	= -xO3
COPTIMIZE_64	= -xO3
COPTIMIZE	= $(COPTIMIZE_$(CLASS))

CCMODE		= -Xa

CFLAGS_32	= -xcg92
CFLAGS_64	= -xchip=ultra $(CCABS32) $(CCREGSYM)
CFLAGS		= $(CFLAGS_$(CLASS))

CFLAGS		+= $(XARCH)
CFLAGS		+= $(COPTIMIZE)
CFLAGS		+= $(EXTRA_CFLAGS)
CFLAGS		+= $(XAOPT)
CFLAGS		+= $(INLINES)
CFLAGS		+= $(CCMODE)
CFLAGS		+= $(SPACEFLAG)

ALWAYS_DEFS_64	+= -D__sparcv9cpu

ASFLAGS		+= $(XARCH)

#
# Hack since lint doesn't know about v9 yet
#
LINT_DEFS_32	=
LINT_DEFS_64	= -D__sparcv9
LINT_DEFS	+= $(LINT_DEFS_$(CLASS))

#
#	The following must be defined for all implementations:
#
#	MODSTUBS:	Module stubs source file.
#
MODSTUBS	 = $(UTSBASE)/sparc/ml/modstubs.s

#
#	Private assym-like file generators
#
AUDIOGENASSYM_SRC = $(UTSBASE)/sun/io/audio_genassym.c

#
#	Define the actual specific platforms - obviously none.
#
MACHINE_DEFS	 = 

#
#	Debugging level
#
#	Special knowledge of which special debugging options effect which
#	file is used to optimize the build if these flags are changed.
#
#	XXX: The above could possibly be done for more flags and files, but
#	     is left as an experiment to the interested reader. Be forewarned,
#	     that excessive use could lead to maintenance difficulties.
#
DEBUG_DEFS_OBJ32	=
DEBUG_DEFS_DBG32	= -DDEBUG
DEBUG_DEFS_OBJ64	=
DEBUG_DEFS_DBG64	= -DDEBUG
DEBUG_DEFS		= $(DEBUG_DEFS_$(BUILD_TYPE))

DEBUG_COND_OBJ32	:sh = echo \\043
DEBUG_COND_DBG32	= 
DEBUG_COND_OBJ64	:sh = echo \\043
DEBUG_COND_DBG64	= 
IF_DEBUG_OBJ		= $(DEBUG_COND_$(BUILD_TYPE))$(OBJS_DIR)/

$(IF_DEBUG_OBJ)syscall.o	:=	DEBUG_DEFS	+= -DSYSCALLTRACE
$(IF_DEBUG_OBJ)clock.o		:=	DEBUG_DEFS	+= -DKSLICE=1

# Comment these out if you don't want dispatcher lock statistics.

# $(IF_DEBUG_OBJ)disp_lock.o	:= DEBUG_DEFS	+= -DDISP_LOCK_STATS

#
#	Build `options'. These are mostly historical and the need for these
#	is largely removed by the module technology. However, the static
#	build will continue to require these.
#
OPTION_DEFS	 = -DSYSACCT -DC2_AUDIT

#
#	Collect the preprocessor definitions to be associated with *all*
#	files.
#
ALL_DEFS	 = $(MACHINE_DEFS) $(DEBUG_DEFS) $(OPTION_DEFS)
#
# ----- TRANSITIONAL SECTION --------------------------------------------------
#

#
#	Not everything which *should* be a module is a module yet. The
#	following is a list of such objects which are currently part of
#	the base kernel but should soon become kmods.
#
NOT_YET_KMODS	 = $(OLDPTY_OBJS) $(PTY_OBJS) $(MOD_OBJS)

#
# ----- END OF TRANSITIONAL SECTION -------------------------------------------

#
#	The kernels modules which are "implementation architecture"
#	specific for this machine are enumerated below. Note that most
#	of these modules must exist (in one form or another) for each
#	architecture.
#
#	Common Drivers (usually pseudo drivers) (/kernel/drv):
#
DRV_KMODS	+= arp clone cn conskbd consms devinfo dump glm icmp icmp6
DRV_KMODS	+= ip ip6 ipd ipdcm ipdptp ipsecah ipsecesp isp iwscn keysock
DRV_KMODS	+= kstat ksyms llc1 llc2 lockstat
DRV_KMODS	+= lofi
DRV_KMODS	+= log logindmux mm nca pm poll
DRV_KMODS	+= pseudo ptc ptm pts ptsl ramdisk rts sad se sy sysmsg
DRV_KMODS	+= tcp tcp6 tl tnf udp udp6 vol wc winlock

#
#	Machine Specific Driver Modules (/kernel/drv):
#
DRV_KMODS	+= audio audiocs audiosup bpp dbri esp fas le lebuffer
DRV_KMODS	+= mixer openeepr options qe qec hme sd ses sgen st xbox
DRV_KMODS	+= soc pln ssd socal
DRV_KMODS	+= ecpp
DRV_KMODS	+= uata dad ifp
DRV_KMODS	+= hid hubd ohci usb_mid scsa2usb
DRV_KMODS	+= fcp fp usoc


#
# PCMCIA specific module(s)
#
DRV_KMODS	+= pem stp4020 pcs pcic
MISC_KMODS	+= cis cs busra dada
DRV_KMODS       += pcata pcelx pcmem pcram pcser

#
#	Exec Class Modules (/kernel/exec):
#
EXEC_KMODS	+= aoutexec elfexec intpexec javaexec

#
#	Scheduling Class Modules (/kernel/sched):
#
SCHED_KMODS	+= RT TS RT_DPTBL TS_DPTBL IA

#
#	File System Modules (/kernel/fs):
#
FS_KMODS	+= fdfs fifofs hsfs lofs namefs nfs pcfs tmpfs
FS_KMODS	+= specfs udfs ufs autofs cachefs procfs sockfs mntfs

#
#	Streams Modules (/kernel/strmod):
#
STRMOD_KMODS	+= atun bufmod connld dedump ldterm ms pckt pfmod pipemod
STRMOD_KMODS	+= ptem ppp ppp_diag redirmod rpcmod rlmod telmod timod
STRMOD_KMODS	+= tirdwr ttcompat tun
STRMOD_KMODS	+= authmd5h authsha1 encrdes encr3des
STRMOD_KMODS	+= usbkbm usbms

#
#	'System' Modules (/kernel/sys):
#
SYS_KMODS	+= c2audit inst_sync kaio msgsys semsys shmsys sysacct pipe
SYS_KMODS	+= doorfs pset

#
#	'User' Modules (/kernel/misc):
#
MISC_KMODS	+= consconfig des diaudio ipc nfs_dlboot nfssrv scsi seg_drv
MISC_KMODS	+= strplumb swapgeneric klmmod klmops tlimod seg_mapdev
MISC_KMODS	+= krtld
MISC_KMODS	+= rpcsec rpcsec_gss kgssapi kmech_dummy
MISC_KMODS	+= ufs_log
MISC_KMODS	+= md5
MISC_KMODS	+= hidparser kbtrans usba
MISC_KMODS	+= fctl

#
#	generic-unix module (/kernel/genunix):
#
GENUNIX_KMODS	+= genunix

#
#	SVVS Testing Modules (/kernel/strmod):
#
#	These are streams and driver modules which are not to be
#	delivered with a released system. However, during development
#	it is convenient to build and install the SVVS kernel modules.
#
SVVS_KMODS	+= lmodb lmode lmodr lmodt lo tidg tivc tmux

SVVS		+= svvs

#
#	Modules eXcluded from the product:
#
XMODS		+= wsdrv
XMODS		+= gl_kmech_krb5
XMODS		+= do_kmech_krb5
