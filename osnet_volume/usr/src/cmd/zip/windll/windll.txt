The code set out below is not intended to be compiled, but is only intended as
a very simplistic pointer to how to load and call the dll. You will have to
look in the files referenced below for actual, working code.

This code, as I understand it, is not callable from Visual Basic. This is due
to a limitation on Visual Basic's part in that it cannot deal with pointers to
functions, nor can it deal with pointers to structures very well. I know almost
nothing about Visual Basic, and at this point, have little or no interest in
learning much about it.

There are two entry points that use the structure shown below:

BOOL WINAPI ZpSetOptions(ZPOPT) and
ZPOPT WINAPI ZpGetOptions(void)

typedef struct {
BOOL fSuffix            = Currently not used by WiZ
BOOL fEncrypt;          = encrypt file
BOOL fSystem;           = include system and hidden files
BOOL fVolume;           = Include volume label
BOOL fExtra;            = Exclude extra attributes
BOOL fNoDirEntries;     = Do not add directory entries
BOOL fDate;             = Exclude files earlier than specified date
BOOL fVerbose;          = Mention oddities in zip file structure
BOOL fQuiet;            = Quiet operation
BOOL fCRLF_LF;          = Translate CR/LF to LF
BOOL fLF_CRLF;          = Translate LF to CR/LF
BOOL fJunkDir;          = Junk directory names
BOOL fRecurse;          = Recurse into subdirectories
BOOL fGrow;             = Allow appending to a zip file
BOOL fForce;            = Make entries using DOS names (k for Katz)
BOOL fMove;             = Delete files added or updated in zip file
BOOL fDeleteEntries;    = Delete files from zip file
BOOL fUpdate;           = Update zip file--overwrite only if newer
BOOL fFreshen;          = Freshen zip file--overwrite only
BOOL fJunkSFX;          = Junk SFX prefix
BOOL fLatestTime;       = Set zip file time to time of latest file in it
BOOL fComment;          = Put comment in zip file
BOOL fOffsets;          = Update archive offsets for SFX files
BOOL fPrivilege;        = Save privileges
BOOL fEncryption        = read only option, true if encryption supported,
                          false otherwise.
int fRepair;            = 1 => fix archive, 2 => try harder to fix
char fLevel;            = Compression level (0 - 9)
char Date[7];           = Date to include files after
char szRootDir[256];    = Directory to use as base for zipping
} ZPOPT, _far *LPZPOPT

BOOL WINAPI ZpSetOptions(ZPOPT)

This call will simply set the options in the zip dll until such time as
another call to this function is made. This must be made before the initial
call to make or update an archive.

ZPOPT WINAPI ZpGetOptions(void)

The call will return the above structure from the dll, with the fEncryption
flag set to the appropriate value based on whether encryption is supported
in this dll or not. It is currently used in WiZ only to determine if
encryption is actually supported.

The main entry point is ZpArchive(ZCL C) where the structure shown below
is passed to the DLL when it is called.

typedef struct {
int  argc;              = Count of files to zip
LPSTR lpszZipFN;        = Archive file name
char **FNV;             = file names to zip up. Think of this an argv
} ZCL, _far *LPZCL;


For examples of how the actual calls to the dll were set up in WiZ, look in
the file makezip.c in the WiZ source directory.

For examples of how the actual loading and unloading of the dll's themselves
was done, look in wizmain.c in the WiZ source directory. Note that WiZ looks
specifically for a particular version number of the dll, and also expects to
find the company name to be Info-ZIP. This is to protect from getting different
versions of the dll loaded, with resulting unknown behavior.

There is a very simplistic example of how to load and call into the dll in
example.c and example.h. Note that this example does not implement any
command line switches at all, and is merely intended as a guide for those
brave enough to enter a new world.

There are four additional (at the moment) entry points:

ZpInit, defined as

int WINAPI ZpInit(ZIPUSERFUNCTIONS far * lpZipUserFunc);

where ZIPUSERFUNCTIONS is defined as below.

ZpInitVB, defined as
int WINAPI ZpInitVB(ZIPUSERFUNCTIONS_VB)

where ZIPUSERFUNCTIONS_VB is defined as:

typedef struct {
HINSTANCE hInstance;
char print[80];
char comment[80];
char password[80];
} ZIPUSERFUNCTIONS_VB, far *LPZIPUSERFUNCTIONS_VB;

ZpInitVB is designed to be used only by Visual Basic users, as it is my
understanding that VB doesn't talk pointers to functions. Hence what is
required here is to pass in the exact name of the functions for printing,
passwords and handling comments. These functions must also be exported by
the VB application. NOTE that this function has been tested under 'C', but
has not with VB. I have no idea if this will truly work.

ZpVersion, defined as

ZpVer * ZpVersion(void);

where ZpVer is defined as:

typedef struct _ZpVer {
    ulg structlen;          /* length of the struct being passed */
    ulg flag;               /* bit 0: is_beta   bit 1: uses_zlib */
    char *betalevel;        /* e.g., "g BETA" or "" */
    char *date;             /* e.g., "4 Sep 95" (beta) or "4 September 1995" */
    char *zlib_version;     /* e.g., "0.95" or NULL */
    _zip_version_type zip;
    _zip_version_type os2dll;
    _zip_version_type windll;
} ZpVer;

See api.c for exactly what ZpVersion does, but the short version of
what it does is return the unzip and dll versions in the ZpVer structure.
The structure typedef's are in api.h

The typedef's for the function pointers in the structure ZIPUSERFUNCTIONS
are shown immediately below.

typedef int (far *DLLPRNT) (FILE *, unsigned int, char *);
typedef int (WINAPI DLLPASSWORD) (char *, char *, int, char *);
typedef char far * (far *DLLCOMMENT) (LPSTR);

typedef struct {
DLLPRNT *print;          = pointer to application's print function.
DLLPASSWORD *password;   = pointer to application's function for processing
                           passwords. Called from ttyio.c
DLLCOMMENT *comment;     = pointer to application's function for processing
                           comments.
} ZIPUSERFUNCTIONS, far * LPZIPUSERFUNCTIONS;

Last revised June 3, 1997.

Mike White
