/*
 * Copyright (c) 1995-1997, by Sun Microsystems, Inc.
 * All Rights Reserved
 */

#pragma ident	"@(#)llib-lucb	1.1	97/03/19 SMI"

/* LINTLIBRARY */
/* PROTOLIB1 */

#include <sys/time.h>
#include <varargs.h>
#include <stdio.h>
#include <sys/types.h>
#include <errno.h>
#include <sys/syscall.h>
#include <sys/siginfo.h>
#include <sys/ucontext.h>
#include <signal.h>
#include <ucontext.h>
#include <setjmp.h>
#include <sys/resource.h>
#include <sys/utsname.h>
#include <sys/systeminfo.h>
#include <sys/errno.h>
#include <sys/unistd.h>
#include <sys/mman.h>
#include <sys/uadmin.h>
#include <sys/times.h>
#include <wait.h>
#include <sys/procset.h>
#include <sys/param.h>
#include <values.h>
#include <ctype.h>
#include <nan.h>
#include <memory.h>
#include <string.h>
#include <locale.h>
#include <fcntl.h>
#include <nlist.h>
#include <sys/dir.h>
#include <sys/stat.h>
#include <sys/priocntl.h>
#include <sys/file.h>
#include <sys/fcntl.h>
#include <sys/statvfs.h>
#include <sys/vfs.h>

#include <sys/timeb.h>

/* port/sys/gettimeofday.c */
int gettimeofday(struct timeval *tp, void *tzp);
int settimeofday(struct timeval *tp, void *tzp);

/* port/sys/signal.c */
int _sigvechandler(int sig, siginfo_t *sip, ucontext_t *ucp);
int _sigsetmask(int mask);
int ucbsigsetmask(int mask);
int _sigblock(int mask);
int ucbsigblock(int mask);
int usigpause(int mask);
int ucbsigpause(int mask);
int _sigvec(int sig, struct sigvec *nvec, struct sigvec *ovec);
int ucbsigvec(int sig, struct sigvec *nvec, struct sigvec *ovec);
int _sigstack(struct sigstack *nss, struct sigstack *oss);
void ucbsignal(int s, void (*a)());
void usignal(int s, void (*a)());
int _siginterrupt(int sig, int flag);
int ucbsiginterrupt(int sig, int flag);

/* port/sys/setjmp.c */
int setjmp(jmp_buf env);
int _setjmp(jmp_buf env);
void _longjmp(jmp_buf env, int val);
void longjmp(jmp_buf env, int val);

/* port/sys/getdtblsize.c */
int getdtablesize(void);

/* port/sys/gethostid.c */
long gethostid(void);

/* port/sys/gethostname.c */
int gethostname(char *name, int namelen);
int sethostname(char *name, int namelen);

/* port/sys/getpagesize.c */
int getpagesize(void);

/* port/sys/killpg.c */
int killpg(int pgrp, int sig);

/* port/sys/mctl.c */
int mctl(caddr_t addr, size_t len, int function, int arg);

/* port/sys/reboot.c */
int reboot(int howto, char *bootargs);

/* port/sys/setreid.c */
int setreuid(int ruid, int euid);
int setregid(int rgid, int egid);

/* port/sys/wait3.c */
int wait3(int *status, int options, struct rusage *rp);
int wstat(int code, int status);

/* port/sys/wait4.c */
pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);

/* port/sys/getrusage.c */
int getrusage(int who, struct rusage *rusage);

/* port/sys/setpgrp.c */
int setpgrp(pid_t pid1, pid_t pid2);

/* port/stdio/sprintf.c */
char *sprintf(const char *string, const char *format, ...);

/* port/stdio/doprnt.c */
int _doprnt(char *format, va_list in_args, FILE *iop);
/*
 * void _mkarglst(fmt, args, arglst) char *fmt; stva_list args;
 *	stva_list arglst[];  {}
 * void _getarg(fmt, pargs, argno) char *fmt; stva_list *pargs; int argno;  {}
 */

/* port/stdio/fopen.c */
FILE *fopen(const char *file, const char *mode);
FILE *freopen(const char *file, const char *mode, FILE *iop);

/* port/stdio/fprintf.c */
int fprintf(FILE *iop, const char *format, ...);

/* port/stdio/printf.c */
/* VARARGS1 */
int printf(const char *format, ...);

/* port/stdio/vfprintf.c */
/* VARARGS 2 */
int vfprintf(FILE *iop, const char *format, va_list);

/* port/stdio/vprintf.c */
/* VARARGS 1 */
int vprintf(const char *format, va_list);

/* port/stdio/vsprintf.c */
/* VARARGS 2 */
char *vsprintf(char *string, char *format, va_list);

/* port/gen/nlist.c */
int nlist(const char *name, struct nlist *list);

/* port/gen/readdir.c */
struct direct *readdir(DIR *dirp);

/* port/gen/scandir.c */
int scandir(char *dirname, struct direct *(*namelist[]), int (*select)(),
	int (*dcomp)());
int alphasort(struct direct **d1, struct direct **d2);

/* port/gen/setpriority.c */
int getpriority(int which, int who);
int setpriority(int which, int who, int prio);

/* port/gen/siglist.c */

/* port/gen/_psignal.c */
void _psignal(unsigned sig, char *s);

/* port/gen/bcmp.c */
int bcmp(char *s1, char *s2, int len);

/* port/gen/bcopy.c */
void bcopy(char *s1, char *s2, int len);

/* port/gen/bzero.c */
void bzero(char *sp, int len);

/* port/gen/ftime.c */
int ftime(struct timeb *tp);

/* port/gen/getusershell.c */
char *getusershell(void);
int endusershell(void);
int setusershell(void);

/* port/gen/getwd.c */
char *getwd(char *pathname);

/* port/gen/index.c */
char *index(char *sp, char c);

/* port/gen/mkstemp.c */
int mkstemp(char *as);

/* port/gen/nice.c */
int nice(int incr);

/* port/gen/psignal.c */
void psignal(unsigned sig, char *s);

/* port/gen/rand.c */
int srand(unsigned x);
int rand(void);

/* port/gen/random.c */
int srandom(unsigned x);
char *initstate(unsigned seed, char *arg_state, int n);
char *setstate(char *arg_state);
long random(void);

/* port/gen/regex.c */
char *re_comp(char *sp);
int re_exec(char *p1);

/* port/gen/rindex.c */
char *rindex(char *sp, char c);

/* port/gen/setbuffer.c */
void setbuffer(FILE *iop, char *abuf, int asize);
int setlinebuf(FILE *iop);

/* port/gen/statfs.c */
int statfs(char *path, struct statfs *buf);
int fstatfs(int fd, struct statfs *buf);
int cnvtvfs(struct statfs *buf, struct statvfs *vbuf);

/* port/gen/times.c */
clock_t times(struct tms *tmsp);

/* port/gen/ualarm.c */
unsigned ualarm(unsigned usecs, unsigned reload);

/* port/gen/usleep.c */
int usleep(unsigned n);
