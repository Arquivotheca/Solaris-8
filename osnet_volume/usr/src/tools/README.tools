#
# Copyright (c) 1993-1999 by Sun Microsystems, Inc.
# All rights reserved.
#
#ident	"@(#)README.tools	1.4	99/11/01 SMI"
#

This directory contains the tools used to do a full build of the
OS/Net workspace.  They usually live in the /opt/onbld directory on build
machines. From here, 'make install' will build and install the tools
in $ROOT/opt/onbld. If you like, 'make pkg' will build the SUNWonbld
package in $(PKGARCHIVE). Installing that package will populate the
/opt/onbld directory, and create a root account for building called 'gk',
which uses csh and has a home directory of /opt/onbld/gk. You can
use this account to do full builds with 'nightly'. You don't have to,
you just need to be root do a full build, but the 'gk' account has 
the path setup properly, contains a prototype .make.machines file for
pmake, and the .login attempts to set up for dmake (if it ever works).

Layout of /opt/onbld
--------------------

/opt/onbld/gk
	gk account's home directory.

/opt/onbld/bin
	basic bin directory - contains scripts

/opt/onbld/bin/${MACH}
	architecture-specific bin directory for binaries.

/opt/onbld/env
	build environment files

/opt/onbld/man
	rudimentary man pages for some of the tools


Tool Summary
------------

bfu
	bonwick/faulkner upgrade. Loads a set of cpio archives created
	by 'mkbfu' onto a machine, either live or on alternate root
	and /usr filesystems. Attempts to preserve important files,
	but may require manual intervention before reboot to resolve
	changes to preserved files.

bfuld
	Used by bfu to survive getting a new runtime linker when extracting
	new cpio archives onto a live system. Patches binaries to use
	a saved runtime linker in /tmp during the bfu process.
	Not run by anything but bfu.

bldenv
	companion to 'nightly.' Takes the same environment file you
	used with 'nightly,' and starts a shell with the environment
	set up the same way as 'nightly' set it up. This is useful
	if you're trying to quickly rebuild portions of a workspace
	built by 'nightly'. 'ws' should not be used for this since it
	sets the environment up differently and may cause everything
	to rebuild (because of different -I or -L paths).

build_cscope

	builds cscope databases in the uts, the platform subdirectories
	of uts, and in usr/src. Uses cscope-fast.

check_rpaths

	finds all the run paths used by ELF binaries in the proto area
	Used by 'nightly's -r option, to detect any changes in rpaths.
	This is mostly to make sure that executables don't have any strange
	rpaths like /opt/SUNWspro/lib.

checkproto

	Runs protocmp and protolist on a workspace (or uses the environment
	variable CODEMGR_WS to determine the workspace). Checks the proto area
	against the packages.

codereview

	Given two filenames, creates a postscript file with the file 
	differences highlighted.

cscope-fast
	The fast version of cscope that we use internally. Seems to work,
	but may need more testing before it's placed in the gate. The source
	just really needs to be here.
	
cstyle
	checks C source for compliance with OS/Net guidelines.

elfcmp
	Compares two ELF modules (e.g. .o files, executables) section by
	section.  Useful for determining whether "trivial" changes -
	cstyle, lint, etc - actually changed the code.

hdrchk
	checks headers for compliance with OS/Net standards (form, includes,
	C++ guards).

install.bin
	binary version of /usr/sbin/install. Used to be vastly faster
	(since /usr/sbin/install is a shell script), but may only be a bit
	faster now. One speedup includes avoiding the name service for the
	well-known, never-changing password entries like 'root' and 'sys.'

keywords
	checks files for proper SCCS keywords.

makebfu
	simple wrapper around 'mkbfu' for use outside nightly (when in a build
	shell from 'ws' or 'bldenv'). 

mkbfu
	makes cpio archives out of the proto area suitable for bfu'ing.
	Used by 'nightly' and 'makebfu'.

nightly
	nightly build script. Takes an environment (or 'env') file describing
	such things as the workspace, the parent, and what to build. See
	env/developer and env/gatekeeper for sample, hopefully well-commented
	env files.

pmodes
	enforces proper file ownership and permissions in pkgmap and package
	prototype* files.  converts files if necessary

protocmp
	compares proto lists and the package definitions. Used by nightly
	to determine if the proto area matches the packages, and to detect
	differences between a childs proto area and a parents.

protocmp.terse
	transforms the output of protocmp into something a bit more friendly

protolist
	create a list of what's in the proto area, to feed to protocmp.

sccscp
	copy a file under SCCS control to another location in a workspace.
	also updates teamware's nametable.

sccshist
	Display the history, comments and diffs, of a file under SCCS
	control.

sccsmv
	rename a file under SCCS control to another location in a workspace.
	also updates teamware's nametable.

sccsrm
	delete a file under SCCS control workspace. also updates teamware's
	nametable. Actually renames it to .del-<file>-`date` so that others
	will see it move when it is brought over (in case they were working
	on it).

ws
	creates a shell with the environment set up to build in the given
	workspace. Used mostly for non-full-build workspaces, so it sets up
	to pull headers and libraries from the proto area of the parent if
	they aren't in the childs proto area.

wx
	A great workspace tool by bonwick. See wx.README for information
	and warnings.

tokenize
	Used to build the sun4u boot block.

How to do a full build
----------------------

1. Find an environment file that might do what you want to do. If you're just
   a developer wanting to do a full build in a child of the gate, copy the
   'developer' environment file to a new name (private to you and/or the
   work being done in this workspace, to avoid collisions with others). Then
   edit the file and tailor it to your workspace. Remember that this file
   is a shell script, so it can do more than set environment variables.

2. Login as 'gk' (or root, but your PATH and .make.machines for pmake will
   not be right). Run 'nightly' and give it your environment file as an
   option. 'nightly' will first look for your environment file in
   /opt/onbld/env, and if it's not there then it will look for it as an
   absolute or relative path. Some people put their environment files in
   their workspace to keep them close.

3. When 'nightly' is complete, it will send a summary of what happened to
   $MAILTO. Usually, the less info in the mail the better. If you have failures,
   you can go look at the full log of what happened, generally in
   $CODEMGR_WS/log/log.<date>/nightly.log (the mail_msg it sent and the proto
   list are there too). You can also find the individual build logs, like
   'make clobber' and 'make install' output in $SRC, under names like
   clobber-${MACH}.out and install-${MACH}.out (for a DEBUG build). These
   will be smaller than nightly.log, and maybe more searchable.

Files you have to update to add a tool
--------------------------------------

1.  Add the tool in its appropriate place.
2.  Update the Makefile as required.
3.  Update usr/src/tools/SUNWonbld/prototype_*.
4.  Update usr/src/pkgdefs/etc/exception_list_*.
5.  Update usr/src/tools/README.tools (this file).
6.  Repeat 1-5 for any man pages.
