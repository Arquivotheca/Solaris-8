.\" @(#)nightly.1	1.1	99/01/11 SMI
.TH nightly 1 "26 Jan 1998"
.SH NAME
.I nightly
\- build an OS-Net consolidation overnight
.SH SYNOPSIS
\fBnightly [-in] [-V VERS] <env_file>\fP
.LP
.SH DESCRIPTION
.IX "OS-Net build tools" "nightly" "" "\fBnightly\fP"
.LP
.I nightly,
the mother of all build scripts,
can bringover, build, archive, package, error check, and
generally do everything it takes to
turn OS/Net consolidation source code into useful stuff.
It is customizable to permit you to run anything from a
simple build to all of the cross-checking a gatekeeper
needs.  The advantage to using
.I nightly
is that you build things correctly, consistently and
automatically, with the best practices; building with
.I nightly
can mean never having to say you're sorry to your
gatekeeper.
.LP
More
specifically,
.I nightly
performs the following tasks, in order, if
all these things are desired:
.LP
.RS
.TP
perform a "make clobber" to clean up old binaries
.TP
bringover from the identified parent gate/clone
.TP
perform non-debug and debug builds
.TP
list proto area files and compare with previous list
.TP
copy updated proto area to parent
.TP
list shared lib interface and compare with previous list
.TP
perform builds with profiling and tracing support
.TP
perform a "make lint" of the kernel and report errors
.TP
perform a "make check" to report hdrchk/cstyle errors
.TP
report the presence of any core files
.TP
check the ELF runpaths of all binaries
.TP
report the total build time
.TP
save a detailed log file for reference
.TP
mail the user a summary of the completed build
.RE
.LP
The actions of the script are almost completely determined by
the environment variables in the
.I env
file, the only necessary argument.  Ths only thing you really
need to use 
.I nightly
is an
.I env
file that does what you want.
.LP

.LP
.SH NIGHTLY_OPTIONS
The environment variable NIGHTLY_OPTIONS controls the actions
.I nightly
will take as it proceeds.
The -i, -n and -V options may also be used from the command line to
control the actions without editing your environment file.  The
-i and -n each make the build complete more quickly by bypassing
some actions.  If NIGHTLY_OPTIONS is not set, "-aDm" is used.

.B Basic action options
.TP 10
.B \-D
Do a build with DEBUG on (non-DEBUG is built by default)
.TP
.B \-F
Do _not_ do a non-DEBUG build (use with -D to get just a DEBUG build)
.TP
.B \-P
Do a build with GPROF on (not built by default)
.TP
.B \-T
Do a build with TRACE on (not built by default)
.TP
.B \-i
Do an incremental build, suppressing the "make clobber"
that by default removes all existing binaries and derived files.
From the command line, -i also suppresses profiled and trace
builds, the lint pass and the cstyle/hdrchk pass
.TP
.B \-n
Suppress the bringover so that the build will start immediately with
current source code
.TP
.B \-a
Create BFU archives
.TP
.B \-p
Create packages for regular install
.TP
.B \-U
Update proto area in the parent workspace
.TP
.B \-u
Update proto_list_${MACH} in the parent workspace
.TP
.B \-m
send mail to $MAILTO at end of build

.LP
.B Code checking options
.TP 10
.B \-A
Check for ABI differences in .so files
.TP
.B \-C
Check for cstyle/hdrchk errors
.TP
.B \-r
check ELF file runpaths in the proto area
.TP
.B \-l
do "make lint" in $LINTDIRS (default: $SRC/uts n)
.TP
.B \-N
Do not run protocmp

.LP
.B Groups of options
.TP 10
.B \-G
Gate keeper default group of options (-au)
.TP
.B \-I
Integration engineer default group of options (-ampu)
.TP
.B \-R
Default group of options for building a release (-mp)

.LP
.B Miscellaneous options
.TP 10
.B \-V VERS
set the build version string to VERS, overriding VERSION
.TP
.B \-d
use Distributed Make (default uses Parallel Make)

.LP
.SH ENVIRONMENT VARIABLES
.LP
Here is a list of prominent environment variables that 
.I nightly
references and the meaning of each variable.
.LP
.RE
.B CODEMGR_WS
.RS 5
The root of your Teamware workspace, which is the directory
containing Codemgr_wsdata. This is the source to be built
.LP
.RE
.B PARENT_WS
.RS 5
The root of the Teamware workspace which is the parent of the
one being built;
.I nightly
uses this for the bringover if $CLONE_WS is not defined
.LP
.RE
.B CLONE_WS
.RS 5
The clone of the parent Teamware workspace;
.I nightly
uses this for the bringover if it is defined, to avoid locking out
updates to the parent for the duration of the bringover
.LP
.RE
.B SRC
.RS 5
Root of OS-Net source code, referenced by the Makefiles.  It is
the starting point of build activity.  It should be expressed
in terms of $CODEMGR_WS
.LP
.RE
.B ROOT
.RS 5
Root of the proto area for the build.  The makefiles direct
the installation of header files and libraries to this area and
direct references to these files by builds of commands and other
targets.  It should be expressed in terms of $CODEMGR_WS
.LP
.RE
.B MACH
.RS 5
The instruction set architecture of the build machine as given
by \fIuname -p\fP, e.g. sparc, i386
.LP
.RE
.B LOCKNAME
.RS 5
The name of the file used to lock out multiple runs of
.I nightly.
This should generally be left to the default setting
.LP
.RE
.B ATLOG
.RS 5
The location of the log directory maintained by
.I nightly
This should generally be left to the default setting
.LP
.RE
.B LOGFILE
.RS 5
The name of the log file in the $ATLOG directory maintained by
.I nightly
This should generally be left to the default setting
.LP
.RE
.B STAFFER
.RS 5
The non-root user identity to use for the bringover from the
clone or parent workspace
.LP
.RE
.B MAILTO
.RS 5
The address to be used to send completion e-mail at the end of
the build (for the -m option)
.LP
.RE
.B REF_PROTO_LIST
.RS 5
Name of file used with protocmp to compare proto area contents
.LP
.RE
.B CPIODIR
.RS 5
The destination for cpio archives.  This may be relative to
$CODEMGR_WS for private archives or relative to $PARENT_WS
if you have different workspaces for different architectures
but want one hierarchy of BFU archives
.LP
.RE
.B PARENT_ROOT
.RS 5
The parent root, which is the destination for updated headers and
libraries when using the -U option
.LP
.RE
.B RELEASE
.RS 5
The release version number to be used, e.g. 5.7
.LP
.RE
.B VERSION
.RS 5
The version text string to be used, e.g. "on998:`date '+%m/%d/%y'`"
.LP
.RE
.B RELEASE_DATE
.RS 5
The release date text to be used, e.g. September 1998
.LP
.RE
.B INTERNAL_RELEASE_BUILD
.RS 5
See Makefile.master - but it mostly controls id strings. Generally,
let nightly set this for you.
.LP
.RE
.B IROOT
.RS 5
Used with shared library interface verification (-A)
.LP
.RE
.B IBUILD
.RS 5
Used with shared library interface verification (-A)
.LP
.RE
.B RELEASE_BUILD
.RS 5
Define this to build a release with a non-debug kernel. 
Generally, let nightly set this for you based on its options.
.LP
.RE
.B PKGDEFS
.RS 5
Points to "$SRC/pkgdefs."  Not used these days.
.LP
.RE
.B PKGARCHIVE
.RS 5
The destination for packages.  This may be relative to
$CODEMGR_WS for private archives or relative to $PARENT_WS
if you have different workspaces for different architectures
but want one hierarchy of BFU archives
.LP
.RE
.B MAKEFLAGS
.RS 5
Set default flags to make, e.g. -k to build all targets regardless of errors
.LP
.RE
.B UT_NO_USAGE_TRACKING
.RS 5
Disables usage reporting by listed Devpro tools. Otherwise it sends mail
to some Devpro machine every time the tools are used.
.LP
.RE
.B LINTDIRS
.RS 5
Directories to lint with the -l option
.LP
.RE
.B OPTHOME
.RS 5
The gate-defined default location of things formerly in /opt, e.g. /ws/on998-tools
.LP
.RE
.B SPRO_ROOT
.RS 5
The gate-defined default location for the Sun compilers, e.g. /ws/on998-tools/SUNWspro
.LP
.RE
.B TEAMWARE
.RS 5
The gate-defined default location for the Teamware tools, e.g. /ws/on998-tools/SUNWspro
.LP
.RE
.SH EXAMPLES
.LP
Start with the example file in /ws/on998-gate/public/etc/env and
make your changes.
.LP
.PD 0
# grep NIGHTLY_OPTIONS on998.nightly
.LP
NIGHTLY_OPTIONS="-ACrlapDm"
.LP
export NIGHTLY_OPTIONS
.LP
# /opt/onbld/bin/nightly -i on998.nightly
.LP
