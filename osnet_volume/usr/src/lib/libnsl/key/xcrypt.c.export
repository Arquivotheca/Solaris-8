/*
 * Copyright (c) 1986-1991 by Sun Microsystems Inc.
 */

#ident	"@(#)xcrypt.c	1.12	98/05/29 SMI"

#if !defined(lint) && defined(SCCSIDS)
static char sccsid[] = "@(#)xcrypt.c 1.3 89/03/24 Copyr 1986 Sun Micro";
#endif

/*
 * xcrypt.c: Hex encryption/decryption and utility routines
 */

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <rpc/trace.h>
#include <rpc/rpc.h>
#include <rpc/key_prot.h>   /* for KEYCHECKSUMSIZE */
#include <rpc/des_crypt.h>
#include <string.h>
#include <rpcsvc/nis_dhext.h>
#include "md5.h"

#define	MD5HEXSIZE	32

extern int bin2hex(int len, unsigned char *binnum, char *hexnum);
extern int hex2bin(int len, char *hexnum, char *binnum);
static char hex[];	/* forward */
static char hexval();

int passwd2des(char *, char *);
static int weak_DES_key(des_block);


/*
 * Encrypt a secret key given passwd
 * The secret key is passed and returned in hex notation.
 * Its length must be a multiple of 16 hex digits (64 bits).
 */
xencrypt(secret, passwd)
	char *secret;
	char *passwd;
{
	trace1(TR_xencrypt, 1);
	return (0);
}

/*
 * Decrypt secret key using passwd
 * The secret key is passed and returned in hex notation.
 * Once again, the length is a multiple of 16 hex digits
 */
xdecrypt(secret, passwd)
	char *secret;
	char *passwd;
{
	trace1(TR_xdecrypt, 1);
	return (0);
}

/*
 * Turn password into DES key
 */
passwd2des(pw, key)
	char *pw;
	char *key;
{
	int i;

	trace1(TR_passwd2des, 0);
	(void) memset(key, 0, 8);
	for (i = 0; *pw; i = (i+1) % 8) {
		key[i] ^= *pw++ << 1;
	}
	des_setparity(key);
	trace1(TR_passwd2des, 1);
	return (1);
}


/*
 * Hex to binary conversion
 */
int
hex2bin(len, hexnum, binnum)
	int len;
	char *hexnum;
	char *binnum;
{
	int i;

	trace2(TR_hex2bin, 0, len);
	for (i = 0; i < len; i++) {
		*binnum++ = 16 * hexval(hexnum[2 * i]) +
					hexval(hexnum[2 * i + 1]);
	}
	trace1(TR_hex2bin, 1);
	return (1);
}

/*
 * Binary to hex conversion
 */
int
bin2hex(len, binnum, hexnum)
	int len;
	unsigned char *binnum;
	char *hexnum;
{
	int i;
	unsigned val;

	trace2(TR_bin2hex, 0, len);
	for (i = 0; i < len; i++) {
		val = binnum[i];
		hexnum[i*2] = hex[val >> 4];
		hexnum[i*2+1] = hex[val & 0xf];
	}
	hexnum[len*2] = 0;
	trace1(TR_bin2hex, 1);
	return (1);
}

static char hex[16] = {
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'a', 'b', 'c', 'd', 'e', 'f',
};

static char
hexval(c)
	char c;
{
	trace1(TR_hexval, 0);
	if (c >= '0' && c <= '9') {
		trace1(TR_hexval, 1);
		return (c - '0');
	} else if (c >= 'a' && c <= 'z') {
		trace1(TR_hexval, 1);
		return (c - 'a' + 10);
	} else if (c >= 'A' && c <= 'Z') {
		trace1(TR_hexval, 1);
		return (c - 'A' + 10);
	} else {
		trace1(TR_hexval, 1);
		return (-1);
	}
}

/*
 * Generic key length/algorithm version of xencrypt().
 *
 * Encrypt a secret key given passwd.
 * The secret key is passed in hex notation.
 * Arg encrypted_secret will be set to point to the encrypted
 * secret key (NUL term, hex notation).
 *
 * Its length must be a multiple of 16 hex digits (64 bits).
 *
 * For 192-0 (AUTH_DES), then encrypt using the same method as xencrypt().
 *
 * If arg do_chksum is TRUE, append the checksum before the encrypt.
 * For 192-0, the checksum is done the same as in xencrypt().  For
 * bigger keys, MD5 is used.
 *
 * Arg netname can be NULL for 192-0.
 */
int
xencrypt_g(
	char *secret,			/* in  */
	keylen_t keylen,		/* in  */
	algtype_t algtype,		/* in  */
	const char *passwd,		/* in  */
	const char netname[],  		/* in  */
	char **encrypted_secret,	/* out */
	bool_t do_chksum)		/* in  */
{
	trace1(TR_xencrypt_g, 1);
	return (0);
}

/*
 * Generic key len and alg type for version of xdecrypt.
 *
 * Decrypt secret key using passwd.  The decrypted secret key
 * *overwrites* the supplied encrypted secret key.
 * The secret key is passed and returned in hex notation.
 * Once again, the length is a multiple of 16 hex digits.
 *
 * If 'do_chksum' is TRUE, the 'secret' buffer is assumed to contain
 * a checksum calculated by a call to xencrypt_g().
 *
 * If keylen is 192 and algtype is 0, then decrypt the same way
 * as xdecrypt().
 *
 * Arg netname can be NULL for 192-0.
 */
int
xdecrypt_g(
	char *secret,		/* out  */
	int keylen,		/* in  */
	int algtype,		/* in  */
	const char *passwd,	/* in  */
	const char netname[],	/* in  */
	bool_t do_chksum)	/* in  */
{
	trace1(TR_xdecrypt_g, 1);
	return (0);
}


/*
 * Modified version of passwd2des(). passwd2des_g() uses the Kerberos
 * RFC 1510 algorithm to generate a DES key from a user password
 * and mix-in string. The mix-in is expected to be the netname.
 * This function to be used only for extended Diffie-Hellman keys.
 *
 * If altarg is TRUE, reverse the concat of passwd and mix-in.
 */
int
passwd2des_g(
	const char *pw,
	const char *mixin,
	int len,
	des_block *key, /* out */
	bool_t altalg)
{

	int  i, j, incr = 1;
	des_block ivec, tkey;
	char *text;
	int  plen, tlen;

	trace1(TR_passwd2des, 0);
	(void) memset(tkey.c, 0, 8);
	(void) memset(ivec.c, 0, 8);


/*
 * Concatentate the password and the mix-in string, fan-fold and XOR them
 * to the required eight byte initial DES key. Since passwords can be
 * expected to use mostly seven bit ASCII, left shift the password one
 * bit in order to preserve as much key space as possible.
 */

#define	KEYLEN sizeof (tkey.c)
	plen = strlen(pw);
	tlen = ((plen + len + (KEYLEN-1))/KEYLEN)*KEYLEN;
	if ((text = (char *)malloc(tlen)) == NULL) {
		return (0);
	}

	(void) memset(text, 0, tlen);

	if (! altalg) {

/*
 * Concatenate the password and the mix-in string, fan-fold and XOR them
 * to the required eight byte initial DES key. Since passwords can be
 * expected to use mostly seven bit ASCII, left shift the password one
 * bit in order to preserve as much key space as possible.
 */
		(void) memcpy(text, pw, plen);
		(void) memcpy(&text[plen], mixin, len);

		for (i = 0, j = 0; pw[j]; j++) {
			tkey.c[i] ^= pw[j] << 1;
			i += incr;
			if (i == 8) {
				i = 7;
				incr = -incr;
			} else if (i == -1) {
				i = 0;
				incr = -incr;
			}
		}

		for (j = 0; j < len; j++) {
			tkey.c[i] ^= mixin[j];
			i += incr;
			if (i == 8) {
				i = 7;
				incr = -incr;
			} else if (i == -1) {
				i = 0;
				incr = -incr;
			}
		}
	} else {  /* use alternative algorithm */
		(void) memcpy(text, mixin, len);
		(void) memcpy(&text[len], pw, plen);

		for (i = 0, j = 0; j < len; j++) {
			tkey.c[i] ^= mixin[j];
			i += incr;
			if (i == 8) {
				i = 7;
				incr = -incr;
			} else if (i == -1) {
				i = 0;
				incr = -incr;
			}
		}

		for (j = 0; pw[j]; j++) {
			tkey.c[i] ^= pw[j] << 1;
			i += incr;
			if (i == 8) {
				i = 7;
				incr = -incr;
			} else if (i == -1) {
				i = 0;
				incr = -incr;
			}
		}
	}
	des_setparity_g(&tkey);

	/*
	* Use the temporary key to produce a DES CBC checksum for the text
	* string; cbc_crypt returns the checksum in the ivec.
	*/
	(void) cbc_crypt(tkey.c, text, tlen, DES_ENCRYPT|DES_HW, ivec.c);
	des_setparity_g(&ivec);
	free(text);

	if (weak_DES_key(ivec)) {
		ivec.c[7] ^= 0xf0;
		/*
		*  XORing with 0xf0 preserves parity, so no need to check
		*  that again.
		*/
	}

	(void) memcpy((*key).c, ivec.c, sizeof (ivec.c));

	trace1(TR_passwd2des_g, 1);
	return (1);

}

struct DESkey {
	uint32_t h1;
	uint32_t h2;
};

/*
 * Weak and semiweak keys from "Applied Cryptography", second edition,
 * by Bruce Schneier, Wiley 1996.
 */
static struct DESkey weakDESkeys[] = {
	/* Weak keys */
	{0x01010101, 0x01010101},
	{0x1f1f1f1f, 0x1f1f1f1f},
	{0xe0e0e0e0, 0xe0e0e0e0},
	{0xfefefefe, 0xfefefefe},
	/* Semiweak keys */
	{0x01fe01fe, 0x01fe01fe},
	{0x1fe01fe0, 0x0ef10ef1},
	{0x01e001e0, 0x01f101f1},
	{0x1ffe1ffe, 0x0efe0efe},
	{0x011f011f, 0x010e010e},
	{0xe0fee0fe, 0xf1fef1fe},
	{0xfe01fe01, 0xfe01fe01},
	{0xe01fe01f, 0xf10ef10e},
	{0xe001e001, 0xf101f101},
	{0xfe1ffe1f, 0xfe0efe0e},
	{0x1f011f01, 0x0e010e01},
	{0xfee0fee0, 0xfef1fef1}
};

static int
weak_DES_key(des_block db)
{
	int i;

	trace1(TR_weak_DES_key, 0);
	for (i = 0; i < sizeof (weakDESkeys)/sizeof (struct DESkey); i++) {
		if (weakDESkeys[i].h1 == db.key.high &&
			weakDESkeys[i].h2 == db.key.low) {
			trace1(TR_weak_DES_key, 1);
			return (1);
		}
	}

	trace1(TR_weak_DES_key, 1);
	return (0);
}
