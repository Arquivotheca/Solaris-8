#
# Copyright (c) 1999 by Sun Microsystems, Inc.
# All rights reserved.
#
#pragma ident "@(#)AMI_Messages.properties	1.2 99/07/11 SMI"
#
# This file contains all AMI error/success/informational messages
# which are to be internationalised.
#
# Each entry is in the form AMI_<module_name>.<tagname>=<data string>
#
AMI_Cmd.host			=Unknown host.
AMI_Cmd.fileNotFound		={0}: file not found.
AMI_Cmd.io			={0}: IO error.
AMI_Cmd.CommaSpace		=, 
AMI_Cmd.newline			=\n
AMI_Cmd.nolargefilesupport	=AMI currently not support large files
#
AMI_Cmd.login.success		=Login into AMI Key Server was successful! Key Store is now registered. 
AMI_Cmd.login.noKeyStore	=No KeyStore Found for principal\n{0}\n\n(New keys may need to be generated for user)\n
AMI_Cmd.login.lookup		=Unable to lookup the AMI Key Server ..
AMI_Cmd.login.register		=Unable to register keystore with AMI Key Server..
AMI_Cmd.login.cpFile		=Change Password for file {0} failed ..
AMI_Cmd.login.cpDefFile		=Change Password Failed for default keystore file.. 
AMI_Cmd.login.cpNamingService	=Change Password Failed for keystore in naming service.. 
AMI_Cmd.login.usage		=amilogin usage:\n\t [-z <keystorefile>]\n\t [-h ] <uids>\n\t [-L <ipaddress/hostname> ]\n\t [-p ]
AMI_Cmd.login.usage1		=-h option can only be used by root.
AMI_Cmd.login.usage2		=Root login has to use the -h option!
AMI_Cmd.login.usage3		=-L option can only be used with -h
AMI_Cmd.logout.lookup		=Unable to lookup the AMI Key Server ..
AMI_Cmd.logout.success		=Logout from AMI Key Server completed successfully!
AMI_Cmd.logout.deregister	=Unable to de-register keystore from AMI Key Server..
AMI_Cmd.logout.usage1		=-h option can only be used by root.
AMI_Cmd.logout.isrootuser	=Root user must use -h option.
AMI_Cmd.logout.usage2		=-L option can only be used with -h option.
AMI_Cmd.logout.usage		=amilogout usage:\n\t [-h <uids>]\n\t [-L <ipaddr/hosts>]
AMI_Cmd.server.nokeys		=No Permanent Keys found to register..continuing..
AMI_Cmd.server.permkeys		=({0}) Permanent Key(s) successfully registered !
AMI_Cmd.server.noentries	=No entries specified for registring, KeyStore is not registered!
AMI_Cmd.server.unsupportedAlgo	=Unsupported Algorithm '{0}' specified for operation.
AMI_Cmd.server.createDir	=Unable to create directory:
AMI_Cmd.server.readFile		=Invalid Data found in keystore file..
AMI_Cmd.server.nokeystore	=No key store match found for host ip = {0}, User Id {1}, KeyStore Type {2} .
AMI_Cmd.server.noprivkey	=No private key found for keytype = {0}
AMI_Cmd.server.invalidAccess	=Invalid Access !! Server Accepts connections only from the LocalHost .
AMI_Cmd.certify.err_nosuchkey   =Unable to locate key in keystore: /{0}/
AMI_Cmd.certify.err_algmismatch =Error: Specified algorithm doesn't match cerreq key
AMI_Cmd.certify.err_writecert   =Error: Unable to write certificate to output
AMI_Cmd.certify.err_parsecert   =Error: Unable to parse or verify certificate
AMI_Cmd.certify.err_gencert     =Error: Unable to generate X509 certificate
AMI_Cmd.certify.err_signcert    =Error: Unable to sign certificate
AMI_Cmd.certify.err_getkeystore =Error: Unable to retrieve CA keystore
AMI_Cmd.certify.err_openinput   =Error: Unable to open input file: /{0}/
AMI_Cmd.certify.err_invalidcert =Error: Valid certificate request not provided
AMI_Cmd.certify.err_certread    =Error: Couldn't read certificate request
AMI_Cmd.certify.err_unknownalg  =Error: Unrecognized algorithm
AMI_Cmd.certify.err_mustberoot  =Error: Must be root to use -h option 
AMI_Cmd.certify.err_unknownhost =Error: Can't determine current host!
AMI_Cmd.certify.err_invalidtime =Error: Incorrect validity time specified.
AMI_Cmd.certify.writecert       =Writing X509 certficate to output stream
AMI_Cmd.certify.tryalias        =Trying alias /{0}/
AMI_Cmd.certify.gencert         =Generating X509 certificate
AMI_Cmd.certify.loadkeystore    =Loading CA's keystore
AMI_Cmd.certify.loadcertreq     =Loading certificate request
AMI_Cmd.certify.isrootuser		=Root user must use -h option.
AMI_Cmd.certify.usage0          =\nUsage:\n
AMI_Cmd.certify.usage1		=\amicertify
AMI_Cmd.certify.usage2		=\ [ -v | -s ] [ -k keyalg ] [ -a alias ]
AMI_Cmd.certify.usage3		=\ [ -i certreq ] [ -o certificate ]
AMI_Cmd.certify.usage4		=\ [ -V days |  -c commence_gt  -e expire_gt ]
AMI_Cmd.certify.usage5		=\ [ -h [-L virtual_host] ]\n
AMI_Cmd.certify.usage6		=\ gt = Generalized Time:
AMI_Cmd.certify.usage7		=\      GMT:        YYYYMMDDhhmmZ  
AMI_Cmd.certify.usage8		=\      GMT+Offset: YYYYMMDDhhmm+hhmm (Pacific Coast +0800)
AMI_Cmd.certify.usage9	        =\      GMT-Offset: YYYYMMDDhhmm-hhmm\n
AMI_Cmd.admin.unknownprop1      =*** UNRECOGNIZED PROPERTY ***
AMI_Cmd.admin.failure		=Operation failed.
AMI_Cmd.admin.promptdn		=Please enter your distinguished name, of the form:\ncn=James Smith, ou=engineering, o=Sun Microsystems, c=US\n\nDistinguished Name:
AMI_Cmd.admin.promptemail	=Please enter your e-mail address, of the form:\njames.smith@sun.com\nE-mail:
AMI_Cmd.admin.unknownprop2	=Error: Unrecognized Property /{0}/
AMI_Cmd.admin.unknownkey        =Error: Key /{0}/ ({1}) not found in AMI properties file
AMI_Cmd.admin.mustberoot        =Error: Must be root to modify AMI system properties
AMI_Cmd.admin.invalidDN      	=\namiadmin:  Error validating DN.\n\nExample: "cn=james smith,ou=engineering,o=sun,c=us"\n\nValid components are:\n   CN=<common name>, O=<organization>, OU=<organization unit>\n   STREET=<street>, L=<Locality>, S=<state>, C=<country>\n   T=<title>\n
AMI_Cmd.admin.root2		=Error: Must be root to use -h option
AMI_Cmd.admin.usehflag		=Error: Use -h option if root
AMI_Cmd.unknownhost 		=Error: Can't determine current host!
AMI_Cmd.admin.backend		=Error: 'file', 'ldap', 'fns', 'nis', and 'nisplus' are the only valid backend values
AMI_Cmd.admin.novalue		=Error: Property value not present
AMI_Cmd.admin.unknownHost	=Error: Unknown hostname
AMI_Cmd.admin.usage1            =Usage: amiadmin [ -h [ -L virtual_host ] ]\n\t [ propertyname ]*  [ -m propertyname value ]*  [ -b backend ]
AMI_Cmd.admin.connect		=Error: Permission Denied (or) Connection Refused (is backend correct/operational?)
AMI_Cmd.admin.usage2            =User Preferences:
AMI_Cmd.admin.usage3		=System Properties:
AMI_Cmd.admin.nsProperty	=Naming Service Backend:
AMI_Cmd.admin.prefixProperty	=Relative Distinguished Name (RDN):
AMI_Cmd.admin.ldapProperty	=Ldap configuration:
AMI_Cmd.admin.logProperty	=Log Information:
AMI_Cmd.admin.debugProperty	=Debug Information:
AMI_Cmd.admin.i18nProperty	=Internationalization:
AMI_Cmd.admin.usage4		=* Note:  Only root can change system properties
AMI_Cmd.sign.rootonly		=-h option must be used by root user.
AMI_Cmd.sign.nodata		=no data to be signed.
AMI_Cmd.sign.key		={0}: alias not found.
AMI_Cmd.sign.certExpired        =Cannot sign:  Certificate has expired
AMI_Cmd.sign.certNotYetValid    =Cannot sign:  Certificate not valid yet.
AMI_Cmd.sign.certErrValidating  =Cannot sign:  Cannot validate Certificate.
AMI_Cmd.sign.algorithm		={0}: unsupported algorithm.
AMI_Cmd.sign.rootonly		=-h option must be used by root user.
AMI_Cmd.sign.isrootuser		=Root user must use -h option.
AMI_Cmd.sign.provider		=No such provider exception. {0}
AMI_Cmd.sign.cantaccessfile	={0}: Cannot access file
AMI_Cmd.sign.usage		=Usage: amisign [-b] [-c] [-s|-v] [-x] [-k algo]\n               [-a keyalias] [-h [-L virtual_host]\n               [-i input_file] [-o sig_file]
AMI_Cmd.verify.invalidIP	=Invalid IP address
AMI_Cmd.verify.rootonly		=-h option must be used by root user.
AMI_Cmd.verify.isrootuser	=Root user must use -h option.
AMI_Cmd.verify.verifail		=Certificate verification failure.
AMI_Cmd.verify.algorithm	={0}: unsupported signature algorithm.
AMI_Cmd.verify.nodata		=no data to be verified.
AMI_Cmd.verify.expire		=Certificate expired.
AMI_Cmd.verify.nvalid		=Certificate not yet valid.
AMI_Cmd.verify.noTrustCert	=No trusted certificates.
AMI_Cmd.verify.corruptfile	=Unable to parse input file. Maybe corrupted !
AMI_Cmd.verify.vrfyFailed	=Verify failed.\n
AMI_Cmd.verify.vrfyOk		=Verified ok.\n
AMI_Cmd.verify.selfSignCert	=Self signed certificate.\n
AMI_Cmd.verify.signedBy		=Data signed by: 
AMI_Cmd.verify.usage		=Usage: amiverify [-h [-L virtual_host] ] [-s|-v] \n                 [-e [-o verified_data_file ] ] \n                 [-i sig_file ] \n       amiverify [-h [-L virtual_host] ] [-s|-v] \n                 [-d data_file ] [ -i sig_file]
AMI_Cmd.cert.usage0		=\nUsage:\n
AMI_Cmd.cert.usage1		=\  amicert    [ -v | -s ] [ -o owner ] [ -f filename ]
AMI_Cmd.cert.usage2		=\             [ -h [-L virtual_host] ]			\n
AMI_Cmd.cert.usage3		=\  amicert -I [ -v | -s ] [ -o owner ] [ -f filename ]
AMI_Cmd.cert.usage4		=\             [ -h [-L virtual_host] ]			\n
AMI_Cmd.cert.usage5		=\  amicert -E [ -v | -s ] [ -o owner ] [ -f filename ]
AMI_Cmd.cert.usage6		=\             [ -i issuer ] [ -n serial_number ]             
AMI_Cmd.cert.usage7		=\             [ -h [-L virtual_host] ]			\n
AMI_Cmd.cert.usage8		=\  amicert -R [ -v | -s ] [ -o owner ] [ -f filename ]
AMI_Cmd.cert.usage9		=\             [ -i issuer ] [ -n serial_number ]
AMI_Cmd.cert.usage10		=\             [ -h [-L virtual_host] ]			\n\n
AMI_Cmd.cert.writecert          =Writing X509 certficate to output stream
AMI_Cmd.cert.loadkeystore       =Loading keystore.
AMI_Cmd.cert.loadcert           =Loading certificate.
AMI_Cmd.cert.filenotfound	=Filename not specified
AMI_Cmd.cert.removecert         =Certificate removed from keystore.
AMI_Cmd.cert.displaycert        =Displaying certificate(s).
AMI_Cmd.cert.certremoved        =Certificate successfully removed.
AMI_Cmd.cert.certadded          =Certificate successfully added.
AMI_Cmd.cert.loadcertStdin      =Loading certificate from stdin.
AMI_Cmd.cert.err_openinput 	=amicert:  Error:  Couldn't open input file.
AMI_Cmd.cert.err_storecert      =amicert:  Error:  Couldn't save certficate in keystore.
AMI_Cmd.cert.err_openoutput 	=amicert:  Error:  Couldn't open output file.
AMI_Cmd.cert.err_readcert	=amicert:  Error:  Couldn't read/parse certificate.
AMI_Cmd.cert.err_writecert      =amicert:  Error:  Couldn't write (export) certificate.
AMI_Cmd.cert.err_removecert     =amicert:  Error:  Couldn't remove certificate from key store.
AMI_Cmd.cert.err_toofewcerts    =amicert:  Error:  Matching certificate not found.
AMI_Cmd.cert.err_toomanycerts 	=amicert:  Error:  Too many certificates matching criteria.
AMI_Cmd.cert.err_notowner 	=amicert:  Error:  Not owner of certificate.
AMI_Cmd.cert.err_getkeystore	=amicert:  Error:  Couldn't get keystore.
AMI_Cmd.cert.err_getcertchain	=amicert:  Error:  Couldn't get certificate chain from key store.
AMI_Cmd.cert.err_unknownhost 	=amicert:  Error:  Can't resolve hostname
AMI_Cmd.cert.err_mustberoot     =amicert:  Error:  Must be root to use -h option 
AMI_Cmd.cert.err_hflagrequired  =amicert:  Error:  User 'root' must use -h option
AMI_Cmd.cert.err_invalidcert    =amicert:  Error:  Invalid certificate in inputstream.
AMI_Cmd.cert.err_certread       =amicert:  Error:  Couldn't read certificate.
AMI_Cmd.cert.err_cantdelete     =amicert:  Error:  Couldn't delete certificate.
AMI_Cmd.cert.err_dupcert        =amicert:  Error:  Certificate is already in keystore.
AMI_Cmd.cert.err_getownerDN     =amicert:  Error:  Couldn't determine owner's DN.
AMI_Cmd.cert.err_nullchainhandle=amicert:  Error:  Null certificate chain keystore handle
AMI_Cmd.encrypt.usage		=Usage: amiencrypt [-b] [-s | -v] [-a encr_alg] [-i input_file]\n\t[-o output_file] [-h [-L ip_address]]\n\t[-r recipient_certificate_file][ recipient... ]]\n\n\tamiencrypt [-b] [-s | -v] [-x [-c cipher_file]]\n\t[-a encr_alg] [-i input_file] [-o output_file]\n\t[-h [-L ip_address]] [-r recipient_certificate_file] [ recipient... ]]
AMI_Cmd.encrypt.algorithm =Unsupported encryption algorithm.
AMI_Cmd.encrypt.noCertForRecipient =No certificate found for Recipient : {0}
AMI_Cmd.encrypt.notrustedcerts  =No trusted certs for this user.
AMI_Cmd.encrypt.notrustedcertsuser  =No trusted certs for recipient : {0}
AMI_Cmd.encrypt.notrustedcertsatall  =No trusted certs for any user(s).
AMI_Cmd.encrypt.isrootuser	=Root user must use -h option.
AMI_Cmd.decrypt.usage		=Usage: amidecrypt [-s | -v] [-i input_file] [-c cipher_file] [-o output_file]\n\t[-h [-L ip_address]]

AMI_Cmd.decrypt.invalidRecList  =This user not specified in encrypted data rec+ipients.
AMI_Cmd.decrypt.unsupportedAlgo =Unsupported algorithm found during decrypt.
AMI_Cmd.decrypt.noCert          =No Certificates found for : {0}
AMI_Cmd.decrypt.isrootuser	=Root user must use -h option.
AMI_Cmd.decrypt.rootonly	=-h option must be used by root user.
AMI_Cmd.decrypt.encdataerror	=No data to decrypt.

#
# I18N Messages for Key Server
#
AMI_KeyServer.usage		=usage: amiserv [ -rmi_host <hostname> ] [ -rmi_port <port> ]
AMI_KeyServer.mustberoot	=Must be root to run AMI key server.
AMI_KeyServer.exception		=AMI key server exception: 
#
# I18N Messages for amikeystore command
#
AMI_Cmd.keystore.bulkopenerr    =Error opening bulk file
AMI_Cmd.keystore.bulkmissingdn  =Bulk file syntax error:  Entry missing DN
AMI_Cmd.keystore.bulkmissingpass=Bulk file syntax error:  Entry missing keystore password
AMI_Cmd.keystore.noSuchAlgorithm=There are no providers for the requested algorithm: {0}
AMI_Cmd.keystore.invalidKeySize=Invalid key size: {0}
AMI_Cmd.keystore.invalidValidity=Invalid validity: {0}
AMI_Cmd.keystore.invalidKeyType=Invalid type: {0}
AMI_Cmd.keystore.badKeySize	={0}: bad key size. Key size must be multiples of 64.
AMI_Cmd.keystore.noKeyStore	=Can not get keystore.
AMI_Cmd.keystore.notKeyEntry	={0}: not a key entry.
AMI_Cmd.keystore.passwdUnchanged=Passwd unchanged.
AMI_Cmd.keystore.keyNotExist	={0}: keyalias not found.
AMI_Cmd.keystore.notTrustedCert	={0}: not a trusted certificate.
AMI_Cmd.keystore.noPasswd	=No password entered.
AMI_Cmd.keystore.noNameDN	=Failure in getting DN name.
AMI_Cmd.keystore.usage		=Usage:\namikeystore -c genkey [ -v ] [ -z keystorefile ] [ -a keyalias ]\n                      [ -k keyalg ] [ -l keysize ] [ -s sigalg]\n                      [ -i valDays ] [ -d distinguished_name ] [-e email]\n                      [ -p passwd ] [ -h [ -L virtual_host ] [ -B bulkfile ]\namikeystore -c list   [ -v ] [ -z keystorefile ] [ -a keyalias ]\n                      [ -p passwd ] [ -h [ -L virtual_host ]\namikeystore -c import [-v] [-t keyentry|trustedcacerts|trustedcert]\n                      [ -z keystorefile ] [ -a keyalias ]\n                      [ -f keyfile ] [ -p passwd ] [ -h [ -L virtual_host ]\namikeystore -c selfcert [ -v ] [ -z keystorefile ] [ -a keyalias]\n                      [ -s sigalg ] [ -d distinguished_name ]\n                      [ -i valDays ] [ -p passwd ] [ -h [ -L virtual_host ]\namikeystore  -c certreq [ -v ] [ -z keystorefile ] [ -a keyalias]\n                      [ -s sigalg ] [ -f certreq_file ] [ -p passwd ] [ -h [ -L virtual_host ]\namikeystore -c export [-v] [ -t keyentry|trustedcacerts|trustedcert ]\n                      [ -z keystorefile ] [ -r ] [ -a keyalias ]\n                      [ -f keyfile ] [ -p passwd ] [ -h [ -L virtual_host ]\namikeystore -c keypasswd [ -v ] [ -z keystorefile ] [ -o oldpasswd ]\n                      [ -n newpasswd ] [ -h [ -L virtual_host ]\namikeystore -c delete [ -v ] [ -z keystorefile ] [ -a keyalias ]\n                      [ -p passwd ] [ -h [ -L virtual_host ]\namikeystore -c genkeyandcsr [ -v ] [ -z keystorefile ] [ -a keyalias ]\n                      [ -k keyalg ] [ -l keysize ] [ -s sigalg]\n [ -i valDays ] [ -d distinguished_name ] [-e email]\n                      [ -p passwd ] [ -h [ -L virtual_host ] [ -f certreq_file ] [ -B bulkfile ]\namikeystore -c gencred [ -v ] [ -z keystorefile ] [ -a keyalias ]\n                      [ -k keyalg ] [ -l keysize ] [ -s sigalg]\n                      [ -i valDays ] [ -d distinguished_name ] [-e email]\n                      [ -p passwd ] [ -h [ -L virtual_host ] [ -B bulkfile ]\n
AMI_Cmd.keystore.defRSAKey	={0}: is the default DSA key.
AMI_Cmd.keystore.DHKeyGen	=DH Keys and SelfSigned certificate Succesfully generated\n.
AMI_Cmd.keystore.RSAKeyGen	=RSA Keys and SelfSigned Certificate Successfully Generated.\n
AMI_Cmd.keystore.defSigKey	={0}: is the default Signature key.\n
AMI_Cmd.keystore.defCryptKey	={0}: is the default Encryption key.\n
AMI_Cmd.keystore.defDHKey	={0}: is the default DH key.\n
AMI_Cmd.keystore.firstLastName	=What is your first and last name?\n[unknown]
AMI_Cmd.keystore.hostName	=What is fully qualified hostname?\n[unknown]
AMI_Cmd.keystore.orgUnitName	=What is the name of your organization unit?\n[unknown]:
AMI_Cmd.keystore.orgName	=What is the name of your organization?\n[unknown]:
AMI_Cmd.keystore.cityName	=What is the name of your City or Locality?\n[unknown]:
AMI_Cmd.keystore.cntryName	=What is the two-letter country code for this unit?\n[unknown]:
AMI_Cmd.keystore.nameDNok	=Is </{0}/> correct? [Yes]
AMI_Cmd.keystore.deleteKey	=Delete key: {0}
AMI_Cmd.keystore.deleteAlias	=Delete alias: {0}
AMI_Cmd.keystore.TCRHeader	=-- TRUSTED CERTIFICATE --: 
AMI_Cmd.keystore.KeyEntHeader	=-- KEY ENTRY --: 
AMI_Cmd.keystore.KeyAlgo	=Key algorithm: 
AMI_Cmd.keystore.certChainHdr	=-- CERTIFICATE CHAIN --: 
AMI_Cmd.keystore.certNoInChain	=Certificate # /{0}/ in chain: 
AMI_Cmd.keystore.usehflag	=Use -h flag for root
AMI_Cmd.keystore.invalidDN      =\namikeystore:  Error validating DN.\n\nExample: "cn=james smith,ou=engineering,o=sun,c=us"\n\nValid components are:\n   CN=<common name>, O=<organization>, OU=<organization unit>\n   STREET=<street>, L=<Locality>, S=<state>, C=<country>\n   T=<title>\n
AMI_Cmd.keystore.invFileFormat	=Invalid bulk file format!

