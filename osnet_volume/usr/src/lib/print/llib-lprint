/*
 * Copyright (c) 1994, 1995, 1996 by Sun Microsystems, Inc.
 * All Rights Reserved
 */

/* LINTLIBRARY */
/* PROTOLIB1 */

#pragma ident	"@(#)llib-lprint	1.1	98/07/21 SMI"

#include <arpa/inet.h>
#include <dirent.h>
#include <dlfcn.h>
#include <errno.h>
#include <fcntl.h>
#include <libintl.h>
#include <netdb.h>
#include <netinet/in.h>
#include <pwd.h>
#include <rpc/rpc.h>
#include <rpcsvc/yp_prot.h>
#include <rpcsvc/ypclnt.h>
#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/systeminfo.h>
#include <sys/types.h>
#include <syslog.h>
#include <unistd.h>
#include <xfn/xfn.h>

typedef struct _jobfile jobfile_t;
typedef struct _job job_t;

struct _jobfile {
	char	*jf_spl_path;	/* df file */
	char	*jf_src_path;	/* source file */
	char	*jf_name;		/* title/name */
	char	*jf_data;	/* ptr to mmapped file */
	long	jf_size;		/* size of data */
	char	jf_mmapped;	/* is this mmapped or malloced */
};

struct _job {
	int	job_id;
	char	*job_printer;
	char	*job_server;
	char	*job_user;
	char	*job_host;
	char	*job_spool_dir;
	jobfile_t *job_cf;
	char 	job_df_next;
	jobfile_t **job_df_list;
};

int	job_primative(job_t *job, char option, char *value);
int	job_svr4_primative(job_t *job, char option, char *value);
int	job_add_data_file(job_t *job, char *path, char *title,
					char type, int copies, int linked,
					int delete);
int	job_store(job_t *job);
void	job_free(job_t *job);
void	job_destroy(job_t *job);
job_t	*job_create(char *printer, char *server, char *spool);
job_t	*job_retrieve(char *xfer_file, char *spool);
job_t	**job_list_append(job_t **list, char *printer, char *spool);
#ifndef SUNOS_4
int	vjob_match_attribute(char *attribute, __va_list ap);
int	vjob_cancel(job_t *job, __va_list ap);
#endif


void **list_append(void **, void *);
void **list_append_unique(void **, void *, int (*)(void *, void*));
void **list_concatenate(void **, void **);
void * list_locate(void **, int (*)(void *, void *), void *);
int list_iterate(void **, int (*)(void *, __va_list), ...);

char * get_user_name(void);
char	*long_date(void);
char	*short_date(void);
int	check_client_spool(char *printer);
int	get_lock(char *name, int write_pid);
uid_t	get_user_id(void);
char	*strcdup(char *, char);
char	*strndup(char *, int);
char	**strsplit(char *, char *);
int	file_size(char *);
int	copy_file(char *src, char *dst);
int	map_in_file(const char *name, char **buf);
int	write_buffer(char *name, char *buf, int len);
void	start_daemon(int do_fork);
int	kill_process(char *file);
void	*dynamic_function(const char *, const char *);

int	net_open(char *host, int timeout);
int	net_close(int nd);
int	net_read(int nd, char *buf, int len);
int	net_write(int nd, char *buf, int len);
int	net_printf(int nd, char *fmt, ...);
char	*net_gets(char *buf, int size, int nd);
int	net_send_message(int nd, char *fmt, ...);
int	net_response(int nd);
int	net_send_file(int nd, char *name, char *data, int data_len,
				int type);


struct ns_bsd_addr {
	char	*server;	/* server name */
	char	*printer;	/* printer name or NULL */
	char	*extension;	/* RFC-1179 conformance */
	char  *pname;		/* Local printer name */
};
typedef struct ns_bsd_addr ns_bsd_addr_t;

/* Key/Value pair structure */
struct ns_kvp {
	char *key;		/* key */
	char *value;		/* value string */
};
typedef struct ns_kvp ns_kvp_t;

/* Printer Object structure */
struct ns_printer {
	char		*name;			/* primary name of printer */
	char		**aliases;		/* aliases for printer */
	char		*source;		/* name service derived from */
	ns_kvp_t	**attributes;		/* key/value pairs. */
};
typedef struct ns_printer ns_printer_t;

/* functions to get/put printer objects */
ns_printer_t *ns_printer_create(char *, char **, char *, ns_kvp_t **);
ns_printer_t *ns_printer_get_name(const char *, const char *);
ns_printer_t **ns_printer_get_list(const char *);
int	ns_printer_put(const ns_printer_t *);
void	ns_printer_destroy(ns_printer_t *);

/* functions to manipulate key/value pairs */
void	*ns_get_value(const char *, const ns_printer_t *);
char	*ns_get_value_string(const char *, const ns_printer_t *);
int	ns_set_value(const char *, const void *, ns_printer_t *);
int	ns_set_value_from_string(const char *, const char *,
						ns_printer_t *);
ns_kvp_t	*ns_kvp_create(const char *, const char *);

/* for BSD bindings only */
ns_bsd_addr_t *ns_bsd_addr_get_default(void);
ns_bsd_addr_t *ns_bsd_addr_get_name(char *name);
ns_bsd_addr_t **ns_bsd_addr_get_all(int);
ns_bsd_addr_t **ns_bsd_addr_get_list(int);

/* others */
ns_printer_t *posix_name(const char *);
int ns_printer_match_name(ns_printer_t *, const char *);
char *ns_printer_name_list(const ns_printer_t *);
char *value_to_string(const char *, void *);
void *string_to_value(const char *, char *);


ns_printer_t *_cvt_nisplus_entry_to_printer(char *, FN_ref_t *, char *);
FN_ref_t *_cvt_printer_to_nisplus_entry(ns_printer_t *);


ns_printer_t *_cvt_pconf_entry_to_printer(char *, char *);
char *_cvt_printer_to_pconf_entry(ns_printer_t *);

ns_printer_t *_cvt_user_string_to_printer(char *, char *);
char *_cvt_printer_to_user_string(ns_printer_t *);


ns_printer_t *_cvt_xfn_entry_to_printer(char *, FN_ref_t *, char *);
FN_ref_t *_cvt_printer_to_xfn_entry(ns_printer_t *);


ns_printer_t *_file_get_name(const char *, const char *,
    ns_printer_t *(*)(char *, char *), char *);

ns_printer_t **_file_get_list(const char *,
    ns_printer_t *(*)(char *, char *), char *);

int _file_put_printer(const char *, const ns_printer_t *,
    ns_printer_t *(*)(char *, char *), char *, char *(*)(ns_printer_t *));


ns_printer_t *_nis_get_name(const char *, const char *,
    ns_printer_t *(*)(char *, char *), char *);

ns_printer_t **_nis_get_list(const char *,
    ns_printer_t *(*)(char *, char *), char *);

int _nis_put_printer(const char *, const ns_printer_t *,
    ns_printer_t *(*)(char *, char *), char *, char *(*)(ns_printer_t *));

ns_printer_t *_xfn_get_name(const char *,
    ns_printer_t *(*)(char *, FN_ref_t *, char *), char *);

ns_printer_t **_xfn_get_list(ns_printer_t *(*)(char *, FN_ref_t *, char *),
    char *);

int _xfn_put_printer(const ns_printer_t *,
    ns_printer_t *(*)(char *, FN_ref_t *, char *), char *,
    FN_ref_t *(*)(ns_printer_t *));
